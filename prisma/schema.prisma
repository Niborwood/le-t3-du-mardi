// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL_DEV")
  referentialIntegrity = "prisma"
}

model Answer {
  id        String   @id @default(cuid())
  name      String
  banned    Boolean  @default(false)
  score     Int      @default(0)
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id        String          @id @default(cuid())
  name      String          @db.VarChar(40)
  banned    Boolean         @default(false)
  current   Boolean         @default(false)
  votes     Int             @default(0)
  used      Boolean         @default(false)
  answers   Answer[]
  votedAt   DateTime?
  userId    String          @default("claxv5jgh0006tojg4pflb1ad")
  user      User            @relation(fields: [userId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  users     TopicsOnUsers[]

  @@index([userId])
}

model TopicsOnUsers {
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([topicId, userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  role          Role            @default(USER)
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  answers       Answer[]
  topics        TopicsOnUsers[]
  Topic         Topic[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
